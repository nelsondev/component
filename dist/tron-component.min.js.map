{"version":3,"file":"tron-component.min.js","sources":["../src/utils/utils.js","../src/core/context.js","../src/core/component.js","../src/index.js"],"sourcesContent":["export const camelToKebab = str => str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\r\n\r\nexport const kebabToCamel = str => str.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())\r\n\r\nexport const convertValue = (value, type) => {\r\n    if (value == null) return value;\r\n\r\n    if (type === Boolean) {\r\n        return value === '' || value === 'true' || value === true;\r\n    }\r\n    if (type === Number) {\r\n        const number = +value;\r\n        return isNaN(number) ? 0 : number;\r\n    }\r\n    if (type === Array || type === Object) {\r\n        if (typeof value === 'string') {\r\n            try {\r\n                return JSON.parse(value);\r\n            } catch {\r\n                return type === Array ? [] : {};\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    return String(value);\r\n}","import { camelToKebab, convertValue } from \"../utils/utils\";\r\n\r\nexport function createContext(component) {\r\n    return {\r\n        /**\r\n         * Reference to the component element\r\n         */\r\n        element: component,\r\n\r\n        /**\r\n         * Define component properties with cleaner API\r\n         */\r\n        defineProps(propList = []) {\r\n            const properties = {};\r\n            const proxy = {};\r\n\r\n            component._propsCache = new Map();\r\n\r\n            propList.forEach(prop => {\r\n                const config = typeof prop === 'string'\r\n                    ? { name: prop, type: String, default: '' }\r\n                    : { type: String, default: '', ...prop };\r\n\r\n                properties[config.name] = config;\r\n            });\r\n\r\n            component.constructor.properties = properties;\r\n            component.constructor.observedAttributes = Object.keys(properties).map(camelToKebab);\r\n\r\n            Object.keys(properties).forEach(name => {\r\n                const config = properties[name];\r\n                const kebabName = camelToKebab(name);\r\n\r\n                Object.defineProperty(proxy, name, {\r\n                    get() {\r\n                        if (component._propsCache.has(name)) {\r\n                            return component._propsCache.get(name);\r\n                        }\r\n\r\n                        const attributeValue = component.getAttribute(kebabName);\r\n                        const value = attributeValue !== null\r\n                            ? convertValue(attributeValue, config.type)\r\n                            : config.default;\r\n\r\n                        if (config.required && value == null) {\r\n                            console.warn(`Required prop '${name}' is missing on ${component.tagName}`);\r\n                        }\r\n\r\n                        if (config.validator && !config.validator(value)) {\r\n                            console.warn(`Invalid prop '${name}' value:`, value);\r\n                        }\r\n\r\n                        component._propsCache.set(name, value);\r\n                        return value;\r\n                    },\r\n\r\n                    set(value) {\r\n                        if (config.validator && !config.validator(value)) {\r\n                            console.warn(`Invalid prop '${name}' value:`, value);\r\n                            return;\r\n                        }\r\n\r\n                        const convertedValue = convertValue(value, config.type);\r\n                        component.setAttribute(kebabName, convertedValue);\r\n                    }\r\n                });\r\n            });\r\n\r\n            component._props = proxy;\r\n            return proxy;\r\n        },\r\n\r\n        /**\r\n         * Create event handlers - returns a function that can be used in templates\r\n         */\r\n        defineEvent(handler) {\r\n            const name = `_evt${component._eventCounter++}`;\r\n            const globalName = `${component._instanceId}_${name}`;\r\n\r\n            component[name] = (...args) => handler(...args);\r\n            component._eventHandlers.add({ name, globalName });\r\n\r\n            // Store component reference globally using the unique global name\r\n            window[globalName] = component;\r\n\r\n            const eventWrapper = (...args) => component[name](...args);\r\n\r\n            eventWrapper.toString = () => {\r\n                const handlerString = handler.toString();\r\n                const paramMatch = handlerString.match(/^\\s*(?:async\\s+)?\\(?([^)]*)\\)?\\s*=>/);\r\n                const params = paramMatch ? paramMatch[1].trim() : '';\r\n\r\n                if (!params) {\r\n                    return `window.${globalName}.${name}()`;\r\n                }\r\n                if (params.includes(',')) {\r\n                    return `window.${globalName}.${name}(event)`;\r\n                }\r\n                return `(function(e){e.preventDefault();window.${globalName}.${name}(e)}).call(this,event)`;\r\n            };\r\n\r\n            return eventWrapper;\r\n        },\r\n\r\n        /**\r\n         * Export an event handler to make it available externally on the component\r\n         */\r\n        exportEvent(methodName, handler) {\r\n            const globalName = `${component._instanceId}_${methodName}`;\r\n\r\n            // Create the method on the component\r\n            component[methodName] = (...args) => {\r\n                if (typeof handler === 'function') {\r\n                    return handler(...args);\r\n                } else {\r\n                    // If handler is already a defineEvent result, call it\r\n                    return handler(...args);\r\n                }\r\n            };\r\n\r\n            // Track for cleanup\r\n            component._eventHandlers.add({ name: methodName, globalName });\r\n\r\n            // Store component reference globally\r\n            window[globalName] = component;\r\n\r\n            return component[methodName];\r\n        },\r\n\r\n        /**\r\n         * Define slots with cleaner API\r\n         */\r\n        defineSlots(slotNames = ['default']) {\r\n            const slots = {};\r\n\r\n            slotNames.forEach(slotName => {\r\n                Object.defineProperty(slots, slotName, {\r\n                    get() {\r\n                        // Process slots lazily when first accessed\r\n                        if (!component._slotsProcessed) {\r\n                            component._processSlots();\r\n                        }\r\n\r\n                        if (slotName === 'default') {\r\n                            return component._defaultSlotContent || '';\r\n                        }\r\n                        return component._namedSlots[slotName] || '';\r\n                    }\r\n                });\r\n            });\r\n\r\n            return slots;\r\n        },\r\n\r\n        /**\r\n         * Define component template with cleaner API\r\n         */\r\n        defineTemplate(template) {\r\n            const html = typeof template === 'function' ? template() : String(template);\r\n            component.innerHTML = html;\r\n        },\r\n\r\n        /**\r\n         * Forward classes from the component to its first child or specified selector\r\n         */\r\n        defineStyle() {\r\n            return component.className || '';\r\n        },\r\n\r\n        /**\r\n         * Lifecycle hooks\r\n         */\r\n        onMounted(callback) {\r\n            component.addEventListener('mounted', callback, { once: true });\r\n        },\r\n\r\n        onUnmounted(callback) {\r\n            component.addEventListener('unmounted', callback);\r\n        }\r\n    };\r\n}","import { createContext } from './context.js';\r\nimport { kebabToCamel } from '../utils/utils.js';\r\n\r\nconst registry = new Map();\r\nconst registered = new Set();\r\nconst callbacks = new Array();\r\n\r\nexport function isReady() {\r\n    for (const component of registered) if (!component._isReady) return;\r\n    readyCallbacks.forEach(cb => cb());\r\n    readyCallbacks = [];\r\n}\r\n\r\nexport function ready(callback) {\r\n    callbacks.push(callback)\r\n}\r\n\r\nexport function defineComponent(tagName, definition) {\r\n    if (registry.has(tagName)) {\r\n        console.warn(`Component ${tagName} already registered`);\r\n        return registry.get(tagName);\r\n    }\r\n\r\n    class ColeComponent extends HTMLElement {\r\n        static properties = {};\r\n\r\n        constructor() {\r\n            super();\r\n\r\n            // Initialize component state\r\n            this._eventHandlers = new Set();\r\n            this._eventListeners = new Set();\r\n            this._eventCounter = 0;\r\n            this._originalContent = null;\r\n            this._namedSlots = {};\r\n            this._defaultSlotContent = '';\r\n            this._slotsProcessed = false;\r\n            this._isReady = false;\r\n\r\n            this._definition = definition;\r\n\r\n            // Create unique instance ID\r\n            this._instanceId = `cc_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\r\n\r\n            registered.add(this);\r\n        }\r\n\r\n        connectedCallback() {\r\n            // Capture content immediately when element is connected, before any nested components are upgraded\r\n            this._captureOriginalContent();\r\n            \r\n            // Process the component definition in the next tick to allow content capture\r\n            Promise.resolve().then(() => {\r\n                const context = createContext(this);\r\n                definition.call(context, context);\r\n                this.dispatchEvent(new CustomEvent('mounted'));\r\n                this._isReady = true\r\n                isReady()\r\n            });\r\n        }\r\n\r\n        disconnectedCallback() {\r\n            // Clean up event listeners\r\n            this._eventListeners.forEach(({ element, type, handler }) => {\r\n                element.removeEventListener(type, handler);\r\n            });\r\n            this._eventListeners.clear();\r\n\r\n            // Clean up event handlers\r\n            this._eventHandlers.forEach(({ name, globalName }) => {\r\n                delete this[name];\r\n                delete window[globalName];\r\n            });\r\n            this._eventHandlers.clear();\r\n\r\n            this.dispatchEvent(new CustomEvent('unmounted'));\r\n        }\r\n\r\n        attributeChangedCallback(name, oldValue, newValue) {\r\n            if (oldValue !== newValue && this._propsCache) {\r\n                this._propsCache.delete(kebabToCamel(name));\r\n            }\r\n        }\r\n\r\n        render() {\r\n            // Clear all caches\r\n            if (this._propsCache) {\r\n                this._propsCache.clear();\r\n            }\r\n            \r\n            // Reset slot processing to force fresh slot extraction\r\n            this._slotsProcessed = false;\r\n            \r\n            // Re-capture original content (in case slot content changed)\r\n            this._captureOriginalContent();\r\n            \r\n            // Re-run the component definition with fresh context\r\n            const context = createContext(this);\r\n            this._definition.call(context, context);\r\n            \r\n            // Dispatch event for any cleanup/update logic\r\n            this.dispatchEvent(new CustomEvent('rerendered', { \r\n                detail: { timestamp: Date.now() }\r\n            }));\r\n        }\r\n\r\n        _captureOriginalContent() {\r\n            // Capture the innerHTML immediately - this should contain the original, unprocesed content\r\n            this._originalContent = this.innerHTML;\r\n            \r\n            // Create a more robust mapping system using element paths instead of indices\r\n            const elementContentMap = new Map();\r\n            \r\n            // Capture content of nested custom elements with their unique identifiers\r\n            const nestedCustomElements = this.querySelectorAll('*');\r\n            nestedCustomElements.forEach(element => {\r\n                const tagName = element.tagName.toLowerCase();\r\n                if (tagName.includes('-') && !element._originalContentCaptured) {\r\n                    // Create a unique key based on tag name, position, and content signature\r\n                    const elementKey = this._createElementKey(element);\r\n                    elementContentMap.set(elementKey, element.innerHTML);\r\n                    element._preservedSlotContent = element.innerHTML;\r\n                    element._originalContentCaptured = true;\r\n                    element._elementKey = elementKey; // Store key on element for later matching\r\n                }\r\n            });\r\n            \r\n            // Store the map on this component instance for later use\r\n            this._elementContentMap = elementContentMap;\r\n        }\r\n\r\n        _createElementKey(element) {\r\n            const tagName = element.tagName.toLowerCase();\r\n            const parent = element.parentElement;\r\n            const siblings = Array.from(parent.children).filter(child => \r\n                child.tagName.toLowerCase() === tagName\r\n            );\r\n            const indexInSiblings = siblings.indexOf(element);\r\n            const contentSignature = element.innerHTML.slice(0, 50); // First 50 chars as signature\r\n            \r\n            return `${tagName}:${indexInSiblings}:${contentSignature.length}:${contentSignature.replace(/\\s+/g, '')}`;\r\n        }\r\n\r\n        _processSlots() {\r\n            // Only process slots once\r\n            if (this._slotsProcessed) return;\r\n            \r\n            this._extractSlots();\r\n            this._slotsProcessed = true;\r\n        }\r\n\r\n        _extractSlots() {\r\n            if (!this._originalContent) {\r\n                this._namedSlots = {};\r\n                this._defaultSlotContent = '';\r\n                return;\r\n            }\r\n\r\n            // Create a temporary container to safely parse HTML\r\n            const tempDiv = document.createElement('div');\r\n            tempDiv.innerHTML = this._originalContent;\r\n\r\n            // Restore preserved content for nested custom elements using robust key matching\r\n            if (this._elementContentMap) {\r\n                const nestedElements = tempDiv.querySelectorAll('*');\r\n                \r\n                nestedElements.forEach(element => {\r\n                    const tagName = element.tagName.toLowerCase();\r\n                    if (tagName.includes('-')) {\r\n                        // Create the same key for this temp element\r\n                        const elementKey = this._createTempElementKey(element, tempDiv);\r\n                        \r\n                        if (this._elementContentMap.has(elementKey)) {\r\n                            element.innerHTML = this._elementContentMap.get(elementKey);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            const namedSlots = {};\r\n            \r\n            // Get direct child template elements with slot attribute\r\n            const directTemplateElements = Array.from(tempDiv.children).filter(child => \r\n                child.tagName === 'TEMPLATE' && child.hasAttribute('slot')\r\n            );\r\n            \r\n            directTemplateElements.forEach(template => {\r\n                const slotName = template.getAttribute('slot');\r\n                namedSlots[slotName] = template.innerHTML;\r\n                template.remove();\r\n            });\r\n\r\n            this._namedSlots = namedSlots;\r\n            \r\n            // Everything remaining is default slot content\r\n            this._defaultSlotContent = tempDiv.innerHTML.trim();\r\n        }\r\n\r\n        _createTempElementKey(element, tempContainer) {\r\n            const tagName = element.tagName.toLowerCase();\r\n            const parent = element.parentElement || tempContainer;\r\n            const siblings = Array.from(parent.children).filter(child => \r\n                child.tagName.toLowerCase() === tagName\r\n            );\r\n            const indexInSiblings = siblings.indexOf(element);\r\n            const contentSignature = element.innerHTML.slice(0, 50);\r\n            \r\n            return `${tagName}:${indexInSiblings}:${contentSignature.length}:${contentSignature.replace(/\\s+/g, '')}`;\r\n        }\r\n    }\r\n\r\n    customElements.define(tagName, ColeComponent);\r\n    registry.set(tagName, ColeComponent);\r\n    return ColeComponent;\r\n}","/**\r\n * Tron Component\r\n * @author Nelson M\r\n */\r\n\r\nimport { defineComponent, ready } from './core/component.js'\r\n\r\nconst html = String.raw;\r\nconst template = html;\r\n\r\n// Expose globally for script tag usage\r\nif (typeof window !== 'undefined') {\r\n    window.defineComponent = defineComponent;\r\n    window.TronComponent = { defineComponent };\r\n    window.html = html;\r\n    window.template = template;\r\n    window.ready = ready;\r\n}\r\n\r\nexport { defineComponent, html, template, ready }"],"names":["camelToKebab","str","replace","toLowerCase","convertValue","value","type","Boolean","Number","number","isNaN","Array","Object","JSON","parse","String","createContext","component","element","defineProps","propList","properties","proxy","_propsCache","Map","forEach","prop","config","name","default","constructor","observedAttributes","keys","map","kebabName","defineProperty","get","has","attributeValue","getAttribute","required","console","warn","tagName","validator","set","convertedValue","setAttribute","_props","defineEvent","handler","_eventCounter","globalName","_instanceId","args","_eventHandlers","add","window","eventWrapper","toString","paramMatch","match","params","trim","includes","exportEvent","methodName","defineSlots","slotNames","slots","slotName","_slotsProcessed","_processSlots","_defaultSlotContent","_namedSlots","defineTemplate","template","html","innerHTML","defineStyle","className","onMounted","callback","addEventListener","once","onUnmounted","registry","registered","Set","callbacks","ready","push","defineComponent","definition","ColeComponent","HTMLElement","static","super","this","_eventListeners","_originalContent","_isReady","_definition","Date","now","Math","random","substring","connectedCallback","_captureOriginalContent","Promise","resolve","then","context","call","dispatchEvent","CustomEvent","readyCallbacks","cb","isReady","disconnectedCallback","removeEventListener","clear","attributeChangedCallback","oldValue","newValue","delete","_","letter","toUpperCase","render","detail","timestamp","elementContentMap","querySelectorAll","_originalContentCaptured","elementKey","_createElementKey","_preservedSlotContent","_elementKey","_elementContentMap","parent","parentElement","indexInSiblings","from","children","filter","child","indexOf","contentSignature","slice","length","_extractSlots","tempDiv","document","createElement","_createTempElementKey","namedSlots","hasAttribute","remove","tempContainer","customElements","define","raw","TronComponent"],"mappings":";oPAAO,MAAMA,EAAeC,GAAOA,EAAIC,QAAQ,qBAAsB,SAASC,cAIjEC,EAAe,CAACC,EAAOC,KAChC,GAAa,MAATD,EAAe,OAAOA,EAE1B,GAAIC,IAASC,QACT,MAAiB,KAAVF,GAA0B,SAAVA,IAA8B,IAAVA,EAE/C,GAAIC,IAASE,OAAQ,CACjB,MAAMC,GAAUJ,EAChB,OAAOK,MAAMD,GAAU,EAAIA,CAC/B,CACA,GAAIH,IAASK,OAASL,IAASM,OAAQ,CACnC,GAAqB,iBAAVP,EACP,IACI,OAAOQ,KAAKC,MAAMT,EACtB,CAAE,MACE,OAAOC,IAASK,MAAQ,GAAK,EACjC,CAEJ,OAAON,CACX,CACA,OAAOU,OAAOV,ICtBX,SAASW,EAAcC,GAC1B,MAAO,CAIHC,QAASD,EAKT,WAAAE,CAAYC,EAAW,IACnB,MAAMC,EAAa,CAAA,EACbC,EAAQ,CAAA,EAuDd,OArDAL,EAAUM,YAAc,IAAIC,IAE5BJ,EAASK,QAAQC,IACb,MAAMC,EAAyB,iBAATD,EAChB,CAAEE,KAAMF,EAAMpB,KAAMS,OAAQc,QAAS,IACrC,CAAEvB,KAAMS,OAAQc,QAAS,MAAOH,GAEtCL,EAAWM,EAAOC,MAAQD,IAG9BV,EAAUa,YAAYT,WAAaA,EACnCJ,EAAUa,YAAYC,mBAAqBnB,OAAOoB,KAAKX,GAAYY,IAAIjC,GAEvEY,OAAOoB,KAAKX,GAAYI,QAAQG,IAC5B,MAAMD,EAASN,EAAWO,GACpBM,EAAYlC,EAAa4B,GAE/BhB,OAAOuB,eAAeb,EAAOM,EAAM,CAC/B,GAAAQ,GACI,GAAInB,EAAUM,YAAYc,IAAIT,GAC1B,OAAOX,EAAUM,YAAYa,IAAIR,GAGrC,MAAMU,EAAiBrB,EAAUsB,aAAaL,GACxC7B,EAA2B,OAAnBiC,EACRlC,EAAakC,EAAgBX,EAAOrB,MACpCqB,EAAOE,QAWb,OATIF,EAAOa,UAAqB,MAATnC,GACnBoC,QAAQC,KAAK,kBAAkBd,oBAAuBX,EAAU0B,WAGhEhB,EAAOiB,YAAcjB,EAAOiB,UAAUvC,IACtCoC,QAAQC,KAAK,iBAAiBd,YAAgBvB,GAGlDY,EAAUM,YAAYsB,IAAIjB,EAAMvB,GACzBA,CACX,EAEA,GAAAwC,CAAIxC,GACA,GAAIsB,EAAOiB,YAAcjB,EAAOiB,UAAUvC,GAEtC,YADAoC,QAAQC,KAAK,iBAAiBd,YAAgBvB,GAIlD,MAAMyC,EAAiB1C,EAAaC,EAAOsB,EAAOrB,MAClDW,EAAU8B,aAAab,EAAWY,EACtC,MAIR7B,EAAU+B,OAAS1B,EACZA,CACX,EAKA,WAAA2B,CAAYC,GACR,MAAMtB,EAAO,OAAOX,EAAUkC,gBACxBC,EAAa,GAAGnC,EAAUoC,eAAezB,IAE/CX,EAAUW,GAAQ,IAAI0B,IAASJ,KAAWI,GAC1CrC,EAAUsC,eAAeC,IAAI,CAAE5B,OAAMwB,eAGrCK,OAAOL,GAAcnC,EAErB,MAAMyC,EAAe,IAAIJ,IAASrC,EAAUW,MAAS0B,GAgBrD,OAdAI,EAAaC,SAAW,KACpB,MACMC,EADgBV,EAAQS,WACGE,MAAM,uCACjCC,EAASF,EAAaA,EAAW,GAAGG,OAAS,GAEnD,OAAKD,EAGDA,EAAOE,SAAS,KACT,UAAUZ,KAAcxB,WAE5B,0CAA0CwB,KAAcxB,0BALpD,UAAUwB,KAAcxB,OAQhC8B,CACX,EAKA,WAAAO,CAAYC,EAAYhB,GACpB,MAAME,EAAa,GAAGnC,EAAUoC,eAAea,IAkB/C,OAfAjD,EAAUiD,GAAc,IAAIZ,IAEbJ,KAAWI,GAQ1BrC,EAAUsC,eAAeC,IAAI,CAAE5B,KAAMsC,EAAYd,eAGjDK,OAAOL,GAAcnC,EAEdA,EAAUiD,EACrB,EAKA,WAAAC,CAAYC,EAAY,CAAC,YACrB,MAAMC,EAAQ,CAAA,EAkBd,OAhBAD,EAAU3C,QAAQ6C,IACd1D,OAAOuB,eAAekC,EAAOC,EAAU,CACnClC,IAAG,KAEMnB,EAAUsD,iBACXtD,EAAUuD,gBAGG,YAAbF,EACOrD,EAAUwD,qBAAuB,GAErCxD,EAAUyD,YAAYJ,IAAa,QAK/CD,CACX,EAKA,cAAAM,CAAeC,GACX,MAAMC,EAA2B,mBAAbD,EAA0BA,IAAa7D,OAAO6D,GAClE3D,EAAU6D,UAAYD,CAC1B,EAKAE,YAAW,IACA9D,EAAU+D,WAAa,GAMlC,SAAAC,CAAUC,GACNjE,EAAUkE,iBAAiB,UAAWD,EAAU,CAAEE,MAAM,GAC5D,EAEA,WAAAC,CAAYH,GACRjE,EAAUkE,iBAAiB,YAAaD,EAC5C,EAER,CCjLA,MAAMI,EAAW,IAAI9D,IACf+D,EAAa,IAAIC,IACjBC,EAAY,IAAI9E,MAQf,SAAS+E,EAAMR,GAClBO,EAAUE,KAAKT,EACnB,CAEO,SAASU,EAAgBjD,EAASkD,GACrC,GAAIP,EAASjD,IAAIM,GAEb,OADAF,QAAQC,KAAK,aAAaC,wBACnB2C,EAASlD,IAAIO,GAGxB,MAAMmD,UAAsBC,YACxBC,kBAAoB,CAAA,EAEpB,WAAAlE,GACImE,QAGAC,KAAK3C,eAAiB,IAAIiC,IAC1BU,KAAKC,gBAAkB,IAAIX,IAC3BU,KAAK/C,cAAgB,EACrB+C,KAAKE,iBAAmB,KACxBF,KAAKxB,YAAc,GACnBwB,KAAKzB,oBAAsB,GAC3ByB,KAAK3B,iBAAkB,EACvB2B,KAAKG,UAAW,EAEhBH,KAAKI,YAAcT,EAGnBK,KAAK7C,YAAc,MAAMkD,KAAKC,SAASC,KAAKC,SAAS/C,SAAS,IAAIgD,UAAU,EAAG,KAE/EpB,EAAW/B,IAAI0C,KACnB,CAEA,iBAAAU,GAEIV,KAAKW,0BAGLC,QAAQC,UAAUC,KAAK,KACnB,MAAMC,EAAUjG,EAAckF,MAC9BL,EAAWqB,KAAKD,EAASA,GACzBf,KAAKiB,cAAc,IAAIC,YAAY,YACnClB,KAAKG,UAAW,EAjDzB,WACH,IAAK,MAAMpF,KAAasE,EAAY,IAAKtE,EAAUoF,SAAU,OAC7DgB,eAAe5F,QAAQ6F,GAAMA,KAC7BD,eAAiB,EACrB,CA8CgBE,IAER,CAEA,oBAAAC,GAEItB,KAAKC,gBAAgB1E,QAAQ,EAAGP,UAASZ,OAAM4C,cAC3ChC,EAAQuG,oBAAoBnH,EAAM4C,KAEtCgD,KAAKC,gBAAgBuB,QAGrBxB,KAAK3C,eAAe9B,QAAQ,EAAGG,OAAMwB,wBAC1B8C,KAAKtE,UACL6B,OAAOL,KAElB8C,KAAK3C,eAAemE,QAEpBxB,KAAKiB,cAAc,IAAIC,YAAY,aACvC,CAEA,wBAAAO,CAAyB/F,EAAMgG,EAAUC,GACjCD,IAAaC,GAAY3B,KAAK3E,aAC9B2E,KAAK3E,YAAYuG,OAAoBlG,EF9Ed1B,QAAQ,YAAa,CAAC6H,EAAGC,IAAWA,EAAOC,eEgF1E,CAEA,MAAAC,GAEQhC,KAAK3E,aACL2E,KAAK3E,YAAYmG,QAIrBxB,KAAK3B,iBAAkB,EAGvB2B,KAAKW,0BAGL,MAAMI,EAAUjG,EAAckF,MAC9BA,KAAKI,YAAYY,KAAKD,EAASA,GAG/Bf,KAAKiB,cAAc,IAAIC,YAAY,aAAc,CAC7Ce,OAAQ,CAAEC,UAAW7B,KAAKC,SAElC,CAEA,uBAAAK,GAEIX,KAAKE,iBAAmBF,KAAKpB,UAG7B,MAAMuD,EAAoB,IAAI7G,IAGD0E,KAAKoC,iBAAiB,KAC9B7G,QAAQP,IAEzB,GADgBA,EAAQyB,QAAQxC,cACpB6D,SAAS,OAAS9C,EAAQqH,yBAA0B,CAE5D,MAAMC,EAAatC,KAAKuC,kBAAkBvH,GAC1CmH,EAAkBxF,IAAI2F,EAAYtH,EAAQ4D,WAC1C5D,EAAQwH,sBAAwBxH,EAAQ4D,UACxC5D,EAAQqH,0BAA2B,EACnCrH,EAAQyH,YAAcH,CAC1B,IAIJtC,KAAK0C,mBAAqBP,CAC9B,CAEA,iBAAAI,CAAkBvH,GACd,MAAMyB,EAAUzB,EAAQyB,QAAQxC,cAC1B0I,EAAS3H,EAAQ4H,cAIjBC,EAHWpI,MAAMqI,KAAKH,EAAOI,UAAUC,OAAOC,GAChDA,EAAMxG,QAAQxC,gBAAkBwC,GAEHyG,QAAQlI,GACnCmI,EAAmBnI,EAAQ4D,UAAUwE,MAAM,EAAG,IAEpD,MAAO,GAAG3G,KAAWoG,KAAmBM,EAAiBE,UAAUF,EAAiBnJ,QAAQ,OAAQ,KACxG,CAEA,aAAAsE,GAEQ0B,KAAK3B,kBAET2B,KAAKsD,gBACLtD,KAAK3B,iBAAkB,EAC3B,CAEA,aAAAiF,GACI,IAAKtD,KAAKE,iBAGN,OAFAF,KAAKxB,YAAc,QACnBwB,KAAKzB,oBAAsB,IAK/B,MAAMgF,EAAUC,SAASC,cAAc,OAIvC,GAHAF,EAAQ3E,UAAYoB,KAAKE,iBAGrBF,KAAK0C,mBAAoB,CACFa,EAAQnB,iBAAiB,KAEjC7G,QAAQP,IAEnB,GADgBA,EAAQyB,QAAQxC,cACpB6D,SAAS,KAAM,CAEvB,MAAMwE,EAAatC,KAAK0D,sBAAsB1I,EAASuI,GAEnDvD,KAAK0C,mBAAmBvG,IAAImG,KAC5BtH,EAAQ4D,UAAYoB,KAAK0C,mBAAmBxG,IAAIoG,GAExD,GAER,CAEA,MAAMqB,EAAa,CAAA,EAGYlJ,MAAMqI,KAAKS,EAAQR,UAAUC,OAAOC,GAC7C,aAAlBA,EAAMxG,SAA0BwG,EAAMW,aAAa,SAGhCrI,QAAQmD,IAC3B,MAAMN,EAAWM,EAASrC,aAAa,QACvCsH,EAAWvF,GAAYM,EAASE,UAChCF,EAASmF,WAGb7D,KAAKxB,YAAcmF,EAGnB3D,KAAKzB,oBAAsBgF,EAAQ3E,UAAUf,MACjD,CAEA,qBAAA6F,CAAsB1I,EAAS8I,GAC3B,MAAMrH,EAAUzB,EAAQyB,QAAQxC,cAC1B0I,EAAS3H,EAAQ4H,eAAiBkB,EAIlCjB,EAHWpI,MAAMqI,KAAKH,EAAOI,UAAUC,OAAOC,GAChDA,EAAMxG,QAAQxC,gBAAkBwC,GAEHyG,QAAQlI,GACnCmI,EAAmBnI,EAAQ4D,UAAUwE,MAAM,EAAG,IAEpD,MAAO,GAAG3G,KAAWoG,KAAmBM,EAAiBE,UAAUF,EAAiBnJ,QAAQ,OAAQ,KACxG,EAKJ,OAFA+J,eAAeC,OAAOvH,EAASmD,GAC/BR,EAASzC,IAAIF,EAASmD,GACfA,CACX,CC/MK,MAACjB,EAAO9D,OAAOoJ,IACdvF,EAAWC,EAGK,oBAAXpB,SACPA,OAAOmC,gBAAkBA,EACzBnC,OAAO2G,cAAgB,CAAExE,mBACzBnC,OAAOoB,KAAOA,EACdpB,OAAOmB,SAAWA,EAClBnB,OAAOiC,MAAQA"}